import streamlit as st
import os
import subprocess
import json
from pathlib import Path
from PIL import Image

st.set_page_config(page_title="PocketMaster Web GUI", layout="wide")
st.title("üß¨ PocketMaster 1.51 ‚Äî –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä–º–∞–Ω–æ–≤")

# --- Helper ---
def show_file_if_exists(path, caption=None, image=True):
    if os.path.exists(path):
        st.markdown(f"### {caption or os.path.basename(path)}")
        if image and path.endswith(('.png', '.jpg', '.jpeg')):
            st.image(Image.open(path), use_column_width=True)
        elif path.endswith(".csv"):
            import pandas as pd
            df = pd.read_csv(path)
            st.dataframe(df)
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV", df.to_csv(index=False), file_name=os.path.basename(path))
        else:
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()
            st.code(content)

# --- Tabs ---
tabs = st.tabs(["‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üì¶ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"])

# ---------------- –ü–ï–†–í–ê–Ø –í–ö–õ–ê–î–ö–ê ----------------
with tabs[0]:
    st.header("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    mode = st.selectbox("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º", ["1 ‚Äî –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞", "2 ‚Äî UniProt ID", "3 ‚Äî PDB ID"])
    folder_path = st.text_input("–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ (–µ—Å–ª–∏ —Ä–µ–∂–∏–º 1)", value=os.getcwd())
    uniprot_id = st.text_input("UniProt ID (–µ—Å–ª–∏ —Ä–µ–∂–∏–º 2)")
    pdb_id = st.text_input("PDB ID (–µ—Å–ª–∏ —Ä–µ–∂–∏–º 3)")

    st.markdown("---")
    st.subheader("üßΩ –û—á–∏—Å—Ç–∫–∞")
    do_preprocess = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä?", value=True)
    clean_options = st.multiselect("–û–ø—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏:", ["1", "2", "3", "4", "5", "6"])
    save_dir = st.text_input("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)", value="aligned_output")

    st.markdown("---")
    st.subheader("üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä–º–∞–Ω–∞")
    pocket_method = st.selectbox("–ú–µ—Ç–æ–¥ –∑–∞–¥–∞–Ω–∏—è –∫–∞—Ä–º–∞–Ω–∞", ["1", "2", "3", "4"])
    ligand_resi = st.text_input("–ù–æ–º–µ—Ä –æ—Å—Ç–∞—Ç–∫–∞ (–¥–ª—è –º–µ—Ç–æ–¥–∞ 1)", value="40")
    ligand_chain = st.text_input("Chain ID (–¥–ª—è –º–µ—Ç–æ–¥–∞ 1)", value="A")
    radius = st.number_input("–†–∞–¥–∏—É—Å (√Ö)", value=7.0)
    resi_chain = st.text_input("–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–º–µ—Ç–æ–¥ 2)", value="")
    chain_id = st.text_input("Chain ID (–º–µ—Ç–æ–¥ 3)", value="")

    st.markdown("---")
    st.subheader("üìä RMSD –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")
    comparison_mode = st.selectbox("–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", ["1 ‚Äî –í—Å–µ —Å–æ –≤—Å–µ–º–∏", "2 ‚Äî –í—Å–µ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º"])
    rmsd_method = st.selectbox("–ú–µ—Ç–æ–¥ RMSD", ["1 ‚Äî align", "2 ‚Äî super", "3 ‚Äî rms", "4 ‚Äî rms_cur"])
    linkage_method = st.selectbox("–ú–µ—Ç–æ–¥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏", ["1 ‚Äî ward", "2 ‚Äî single", "3 ‚Äî complete", "4 ‚Äî average", "5 ‚Äî centroid", "6 ‚Äî median", "7 ‚Äî weighted"])
    cl_choice = st.selectbox("–°–ø–æ—Å–æ–± –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏", ["1 ‚Äî –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É", "2 ‚Äî –ø–æ –ø–æ—Ä–æ–≥—É", "3 ‚Äî –∞–≤—Ç–æ"])
    num_clusters = st.number_input("–ß–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", min_value=2, value=3)
    distance_threshold = st.number_input("–ü–æ—Ä–æ–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è", value=3.0)

    st.markdown("---")
    run = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")

    if run:
        st.success("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑‚Ä¶")

        config = {
            "mode": int(mode[0]),
            "folder_path": folder_path,
            "uniprot_id": uniprot_id,
            "pdb_id": pdb_id,
            "do_preprocess": "1" if do_preprocess else "0",
            "clean_options": clean_options,
            "save_dir": save_dir,
            "pocket_method": pocket_method,
            "ligand_resi": ligand_resi,
            "ligand_chain": ligand_chain,
            "radius": radius,
            "resi_chain": resi_chain,
            "chain_id": chain_id,
            "comparison_mode": comparison_mode[0],
            "rmsd_method": rmsd_method[0],
            "linkage_method": linkage_method[0],
            "cl_choice": cl_choice[0],
            "num_clusters": int(num_clusters),
            "distance_threshold": float(distance_threshold)
        }

        with open("temp_config.json", "w") as f:
            json.dump(config, f, indent=2)

        result = subprocess.run(
            ["python3", "PocketMaster1.51t.py", "--config", "temp_config.json"],
            capture_output=True, text=True
        )

        st.session_state.run_log = result.stdout + "\n" + result.stderr
        st.success("–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É 'üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã'")


# ---------------- –í–¢–û–†–ê–Ø –í–ö–õ–ê–î–ö–ê ----------------
with tabs[1]:
    st.header("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    if "run_log" in st.session_state:
        st.subheader("üìã –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        st.code(st.session_state.run_log, language="bash")

    aligned_path = Path(folder_path) / "aligned_output"

    if aligned_path.exists():
        show_file_if_exists(aligned_path / "rmsd_heatmap.png", "üßä –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ RMSD")
        show_file_if_exists(aligned_path / f"RMSD_dendrogram_{config.get('linkage_method', 'ward')}.png", "üå≥ –î–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º–∞")
        show_file_if_exists(aligned_path / "rmsd_all_atoms_hist.png", "üìâ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ RMSD (–≤—Å–µ –∞—Ç–æ–º—ã)")
        show_file_if_exists(aligned_path / "rmsd_calpha_hist.png", "üìâ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ RMSD (CŒ±)")
        show_file_if_exists(aligned_path / "rmsd_all_atoms.csv", "üìä RMSD (–≤—Å–µ –∞—Ç–æ–º—ã)", image=False)
        show_file_if_exists(aligned_path / "rmsd_calpha.csv", "üìä RMSD (CŒ±)", image=False)
        show_file_if_exists(aligned_path / "info.txt", "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", image=False)
    else:
        st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –ø—É—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π.")


# ---------------- –¢–†–ï–¢–¨–Ø –í–ö–õ–ê–î–ö–ê ----------------
with tabs[2]:
    st.header("üì¶ –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    uploaded_config = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON –∫–æ–Ω—Ñ–∏–≥")

    if uploaded_config:
        config_data = json.load(uploaded_config)
        st.json(config_data)
