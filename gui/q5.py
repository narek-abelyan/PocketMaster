import streamlit as st
import os
import json
import subprocess
from pathlib import Path
from PIL import Image
import streamlit.components.v1 as components

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è py3Dmol
try:
    import py3Dmol
    HAS_PY3DMOL = True
except ImportError:
    HAS_PY3DMOL = False

st.set_page_config(page_title="PocketMaster Web GUI", layout="wide")
st.title("üß¨ PocketMaster 1.51 ‚Äî –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä–º–∞–Ω–æ–≤")

# --- Helper ---
def show_file_if_exists(path, caption=None, image=True):
    path = Path(path)
    if path.exists():
        st.markdown(f"### {caption or path.name}")
        if image and path.suffix.lower() in (".png", ".jpg", ".jpeg"):
            st.image(Image.open(path), use_column_width=True)
        elif path.suffix.lower() == ".csv":
            import pandas as pd
            df = pd.read_csv(path)
            st.dataframe(df)
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV", df.to_csv(index=False), file_name=path.name)
        else:
            with open(path, "r", encoding="utf-8") as f:
                content = f.read()
            st.code(content)

# --- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ---
def visualize_structure_interactive(filepath):
    if not HAS_PY3DMOL:
        st.warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ py3Dmol: pip install py3dmol")
        return

    filepath = Path(filepath)
    if not filepath.exists():
        st.warning(f"–§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    with open(filepath, "r") as f:
        mol_str = f.read()

    ext = filepath.suffix.lower()
    format_map = {".pdb": "pdb", ".mol2": "mol2", ".sdf": "sdf"}
    fmt = format_map.get(ext)
    if not fmt:
        st.info(f"–§–æ—Ä–º–∞—Ç {ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è–º–∏
    col1, col2, col3 = st.columns(3)
    with col1:
        style = st.selectbox("–°—Ç–∏–ª—å", ["stick", "line", "cartoon", "surface", "sphere", "cross"], index=0)
    with col2:
        color = st.selectbox("–¶–≤–µ—Ç", ["spectrum", "white", "red", "green", "blue", "yellow", "cyan", "magenta"], index=0)
    with col3:
        opacity = st.slider("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è surface)", 0.0, 1.0, 0.6, 0.05)

    # –í—ã–±–æ—Ä —Ü–µ–ø–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ)
    chain_input = st.text_input("–í—ã–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–µ–ø–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä A,B,C)", value="")
    chains = [c.strip() for c in chain_input.split(",") if c.strip()]

    viewer = py3Dmol.view(width=850, height=600)
    viewer.addModel(mol_str, fmt)

    style_dict = {}
    if style == "surface":
        style_dict = {style: {"opacity": opacity, "color": color}}
    else:
        style_dict = {style: {"color": color}}

    if chains:
        for chain in chains:
            viewer.setStyle({"chain": chain}, style_dict)
    else:
        viewer.setStyle({}, style_dict)

    viewer.zoomTo()
    viewer.setBackgroundColor("0xeeeeee")
    viewer.rotate(90, "y")

    html = viewer._make_html()
    components.html(html, height=600, scrolling=False)

# --- Tabs ---
tabs = st.tabs(["‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üì¶ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"])

if "config" not in st.session_state:
    st.session_state.config = {}

# ---------------- –ü–ï–†–í–ê–Ø –í–ö–õ–ê–î–ö–ê ----------------
with tabs[0]:
    st.header("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    mode = st.selectbox("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º", ["1 ‚Äî –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞", "2 ‚Äî UniProt ID", "3 ‚Äî PDB ID"])
    folder_path = st.text_input("–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ (–µ—Å–ª–∏ —Ä–µ–∂–∏–º 1)", value=os.getcwd())
    uniprot_id = st.text_input("UniProt ID (–µ—Å–ª–∏ —Ä–µ–∂–∏–º 2)")
    pdb_id = st.text_input("PDB ID (–µ—Å–ª–∏ —Ä–µ–∂–∏–º 3)")

    if mode.startswith("1"):
        st.subheader("üëì –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä")
        p = Path(folder_path)
        if p.exists():
            files = list(p.glob("*.pdb")) + list(p.glob("*.mol2")) + list(p.glob("*.sdf"))
            if files:
                selected_file = st.selectbox("–§–∞–π–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", files, format_func=lambda x: x.name)
                if selected_file:
                    visualize_structure_interactive(selected_file)
            else:
                st.info("–í –ø–∞–ø–∫–µ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        else:
            st.warning("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    st.subheader("üßΩ –û—á–∏—Å—Ç–∫–∞")
    do_preprocess = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä?", value=True)
    clean_options = st.multiselect("–û–ø—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏", ["1", "2", "3", "4", "5", "6"])
    save_dir = st.text_input("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", value="aligned_output")

    st.subheader("üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä–º–∞–Ω–∞")
    pocket_method = st.selectbox("–ú–µ—Ç–æ–¥ –∑–∞–¥–∞–Ω–∏—è –∫–∞—Ä–º–∞–Ω–∞", ["1", "2", "3", "4"])
    ligand_resi = st.text_input("–ù–æ–º–µ—Ä –æ—Å—Ç–∞—Ç–∫–∞", value="40")
    ligand_chain = st.text_input("Chain ID", value="A")
    radius = st.number_input("–†–∞–¥–∏—É—Å", value=7.0)
    resi_chain = st.text_input("–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤", value="")
    chain_id = st.text_input("Chain ID (–º–µ—Ç–æ–¥ 3)", value="")

    st.subheader("üìä RMSD –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")
    comparison_mode = st.selectbox("–†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", ["1 ‚Äî –í—Å–µ —Å–æ –≤—Å–µ–º–∏", "2 ‚Äî –í—Å–µ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º"])
    rmsd_method = st.selectbox("–ú–µ—Ç–æ–¥ RMSD", ["1 ‚Äî align", "2 ‚Äî super", "3 ‚Äî rms", "4 ‚Äî rms_cur"])
    linkage_method = st.selectbox("–ú–µ—Ç–æ–¥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏", ["1 ‚Äî ward", "2 ‚Äî single", "3 ‚Äî complete", "4 ‚Äî average", "5 ‚Äî centroid", "6 ‚Äî median", "7 ‚Äî weighted"])
    cl_choice = st.selectbox("–¢–∏–ø –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏", ["1 ‚Äî –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É", "2 ‚Äî –ø–æ –ø–æ—Ä–æ–≥—É", "3 ‚Äî –∞–≤—Ç–æ"])
    num_clusters = st.number_input("–ß–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", min_value=2, value=3)
    distance_threshold = st.number_input("–ü–æ—Ä–æ–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è", value=3.0)

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
        config = {
            "mode": int(mode[0]),
            "folder_path": folder_path,
            "uniprot_id": uniprot_id,
            "pdb_id": pdb_id,
            "do_preprocess": "1" if do_preprocess else "0",
            "clean_options": clean_options,
            "save_dir": save_dir,
            "pocket_method": pocket_method,
            "ligand_resi": ligand_resi,
            "ligand_chain": ligand_chain,
            "radius": radius,
            "resi_chain": resi_chain,
            "chain_id": chain_id,
            "comparison_mode": comparison_mode[0],
            "rmsd_method": rmsd_method[0],
            "linkage_method": linkage_method[0],
            "cl_choice": cl_choice[0],
            "num_clusters": int(num_clusters),
            "distance_threshold": float(distance_threshold)
        }
        st.session_state.config = config
        with open("temp_config.json", "w") as f:
            json.dump(config, f, indent=2)
        result = subprocess.run(["python3", "PocketMaster1.51t.py", "--config", "temp_config.json"], capture_output=True, text=True)
        st.session_state.run_log = result.stdout + "\n" + result.stderr
        st.success("–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É 'üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã'")

# ---------------- –í–¢–û–†–ê–Ø –í–ö–õ–ê–î–ö–ê ----------------
with tabs[1]:
    st.header("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    if "run_log" in st.session_state:
        st.subheader("üìã –õ–æ–≥")
        st.code(st.session_state.run_log, language="bash")

    config = st.session_state.get("config", {})
    result_dir = Path(config.get("folder_path", ".")) / config.get("save_dir", "aligned_output")

    if result_dir.exists():
        show_file_if_exists(result_dir / "rmsd_heatmap.png", "üßä –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ RMSD")
        show_file_if_exists(result_dir / f"RMSD_dendrogram_{config.get('linkage_method', 'ward')}.png", "üå≥ –î–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º–∞")
        show_file_if_exists(result_dir / "rmsd_all_atoms_hist.png", "üìâ RMSD (–≤—Å–µ –∞—Ç–æ–º—ã)")
        show_file_if_exists(result_dir / "rmsd_calpha_hist.png", "üìâ RMSD (CŒ±)")
        show_file_if_exists(result_dir / "rmsd_all_atoms.csv", "üìä RMSD (–≤—Å–µ –∞—Ç–æ–º—ã)", image=False)
        show_file_if_exists(result_dir / "rmsd_calpha.csv", "üìä RMSD (CŒ±)", image=False)
        show_file_if_exists(result_dir / "info.txt", "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", image=False)
    else:
        st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

# ---------------- –¢–†–ï–¢–¨–Ø –í–ö–õ–ê–î–ö–ê ----------------
with tabs[2]:
    st.header("üì¶ –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

    uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ JSON", type=["json"])
    if uploaded:
        try:
            config_data = json.load(uploaded)
            st.session_state.config = config_data
            st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            st.json(config_data)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    if st.session_state.get("config"):
        st.markdown("### –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        text = st.text_area("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å JSON", json.dumps(st.session_state.config, indent=2))
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"):
            try:
                parsed = json.loads(text)
                with open("temp_config.json", "w") as f:
                    json.dump(parsed, f, indent=2)
                st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
